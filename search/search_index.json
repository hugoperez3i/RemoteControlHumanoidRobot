{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Some information</p>"},{"location":"Demo%20Showcase/","title":"Demo Showcase","text":"<p>A simple showcase of the telerobotic platform working, in which the Youbionic Half performs a scripted movement.</p>"},{"location":"Demo%20Showcase/#showcase-video","title":"Showcase Video","text":""},{"location":"Demo%20Showcase/#demo-walkthrough","title":"Demo walkthrough","text":"<p>This demo intends to showcase how the platform operates. For this task a simple client is used to control the Youbionic Half robot, and perform a series of scripted movements that resemble the action of looking towards your hand, open and close it, and get back to your original position.</p>"},{"location":"Demo%20Showcase/#server-connection","title":"Server Connection","text":"<p>The first part of the cpp script, available on the next section, creates a client that connects to a given IP at the predefined port <code>57573</code>:</p> <pre><code>/* Start connection */\nClient c(ip);\n    usleep(500000);\n</code></pre>"},{"location":"Demo%20Showcase/#robot-selection","title":"Robot Selection","text":"<p>Then the script selects the robot it wants to control, in this case Maroon - the ID used by the Youbionic Half robot in our setup, using the <code>connectToMCU()</code> function:</p> <pre><code>/* Select the mcu to control */\nstd::cout&lt;&lt;c.connectToMCU(\"Maroon\") &lt;&lt;\"\\n\";\n    usleep(2500000); // Wait 2.5 seconds\n</code></pre>"},{"location":"Demo%20Showcase/#movement-configuration-and-execution","title":"Movement Configuration and Execution","text":"<p>For each movement, the client needs to generate a <code>std::vector&lt;int&gt;</code> in which to store the desired movements. For this client implementation, a <code>uint32_t flag</code> bitmask is also needed. This flag serves as an efficient way of indicating <code>moveServos()</code> the IDs of the servos that we want to move.</p> <p><pre><code>/* Combined movement 1 - Rise hand towards face, tilt head */\nstd::vector&lt;int&gt; pV1;{\n    flag=0;\n    pV1.push_back(0); // rotate palm towards face\n    flag = (flag | (1&lt;&lt;13)); \n    pV1.push_back(0); // flex arm towards face\n    flag = (flag | (1&lt;&lt;15)); \n    pV1.push_back(100); // Rotate arm towards body\n    flag = (flag | (1&lt;&lt;17)); \n    pV1.push_back(179); // Tilt head towards hand\n    flag = (flag | (1&lt;&lt;25)); \n    pV1.push_back(141); // Rotate head towards hand\n    flag = (flag | (1&lt;&lt;26)); \n}\n</code></pre> Lastly, the <code>moveServos()</code> function is used to send the movement order to the server, which will validate it and provide a two-step response (assuming it passes validation). The first ACK will be \"intercepted\" by <code>moveServos()</code>, which confirms that the order is valid, and that it will be sent to the robot for execution. The second response is read by the <code>readServerResponse()</code>, and it corresponds to the movement confirmation by the robot MCU.</p> <pre><code>std::cout&lt;&lt;c.moveServos(flag,pV1) &lt;&lt;\" - Servo movemet confirmation\\n\";\nstd::cout&lt;&lt;c.readServerResponse() &lt;&lt;\" - MCU confirmation of movement\\n\";\n    usleep(1500000); // Wait 1.5 seconds\n</code></pre> <p>After every code section, the function <code>usleep()</code> is used to introduce a delay between instructions. While during normal usage this might not be required, in this script it comes in handy to force a minor pause between each block execution - making the individual movements much more obvious and deliberate.</p>"},{"location":"Demo%20Showcase/#code-for-the-demo","title":"Code for the Demo","text":"<p>Below is the full main.cpp used for the demo. The full source files for the client can be found in this github repo.</p> main.cpp<pre><code>#include \"Client.h\"\n\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;unistd.h&gt;\n\n\nint main(int argc, char const *argv[]){\n\n    uint32_t flag=0;\n\n    /* Start connection */\n    Client c(ip);\n        usleep(500000);\n\n    /* Select the mcu to control */\n    std::cout&lt;&lt;c.connectToMCU(\"Maroon\") &lt;&lt;\"\\n\";\n        usleep(2500000); // Wait 2.5 seconds\n\n\n    /* Combined movement 1 - Rise hand towards face, tilt head */\n    std::vector&lt;int&gt; pV1;{\n        flag=0;\n        pV1.push_back(0); // rotate palm towards face\n        flag = (flag | (1&lt;&lt;13)); \n        pV1.push_back(0); // flex arm towards face\n        flag = (flag | (1&lt;&lt;15)); \n        pV1.push_back(100); // Rotate arm towards body\n        flag = (flag | (1&lt;&lt;17)); \n        pV1.push_back(179); // Tilt head towards hand\n        flag = (flag | (1&lt;&lt;25)); \n        pV1.push_back(141); // Rotate head towards hand\n        flag = (flag | (1&lt;&lt;26)); \n    }\n    std::cout&lt;&lt;c.moveServos(flag,pV1) &lt;&lt;\" - Servo movemet comprobation\\n\";\n    std::cout&lt;&lt;c.readServerResponse() &lt;&lt;\" - MCU confirmation of movement\\n\";\n        usleep(1500000); // Wait 1.5 seconds\n\n    /* Combined movement 3 - Close hand */\n    std::vector&lt;int&gt; pV3;{\n        flag=0;\n        pV3.push_back(0); // Thumb\n        flag = (flag | (1&lt;&lt;6)); \n        pV3.push_back(0); // Index\n        flag = (flag | (1&lt;&lt;7)); \n        pV3.push_back(0); // Middle\n        flag = (flag | (1&lt;&lt;8)); \n        pV3.push_back(0); // Ring\n        flag = (flag | (1&lt;&lt;9)); \n        pV3.push_back(0); // Little\n        flag = (flag | (1&lt;&lt;10));     }\n    std::cout&lt;&lt;c.moveServos(flag,pV3) &lt;&lt;\" - Servo movemet comprobation\\n\";\n    std::cout&lt;&lt;c.readServerResponse() &lt;&lt;\" - MCU confirmation of movement\\n\";\n        usleep(1500000); // Wait 1.5 seconds\n\n    /* Combined movement 4 - rest hand */\n    std::vector&lt;int&gt; pV4;{\n        flag=0;\n        pV4.push_back(90); // Thumb\n        flag = (flag | (1&lt;&lt;6)); \n        pV4.push_back(90); // Index\n        flag = (flag | (1&lt;&lt;7)); \n        pV4.push_back(90); // Middle\n        flag = (flag | (1&lt;&lt;8)); \n        pV4.push_back(90); // Ring\n        flag = (flag | (1&lt;&lt;9)); \n        pV4.push_back(90); // Little\n        flag = (flag | (1&lt;&lt;10)); \n    }\n    std::cout&lt;&lt;c.moveServos(flag,pV4) &lt;&lt;\" - Servo movemet comprobation\\n\";\n    std::cout&lt;&lt;c.readServerResponse() &lt;&lt;\" - MCU confirmation of movement\\n\";\n        usleep(1500000); // Wait 1.5 seconds\n\n    /* Combined movement 5 - Move arm and head back to \"resting\" position */\n    std::vector&lt;int&gt; pV5;{\n        flag=0;\n        pV5.push_back(90); // rotate palm towards face\n        flag = (flag | (1&lt;&lt;13)); \n        pV5.push_back(60); // flex arm towards face\n        flag = (flag | (1&lt;&lt;15)); \n        pV5.push_back(70); // Rotate arm towards body\n        flag = (flag | (1&lt;&lt;17)); \n        pV5.push_back(126); // Tilt head towards hand\n        flag = (flag | (1&lt;&lt;25)); \n        pV5.push_back(100); // Rotate head towards hand\n        flag = (flag | (1&lt;&lt;26)); \n    }\n    std::cout&lt;&lt;c.moveServos(flag,pV5) &lt;&lt;\" - Servo movemet comprobation\\n\";\n    std::cout&lt;&lt;c.readServerResponse() &lt;&lt;\" - MCU confirmation of movement\\n\";\n        usleep(2500000); // Wait 2.5 seconds\n\n}\n</code></pre>"}]}